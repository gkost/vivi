"use strict";
/// <reference path="../../typings.d.ts" />
var platform_browser_dynamic_1 = require('@angular/platform-browser-dynamic');
var router_1 = require('@angular/router');
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var app_component_1 = require('./app.component');
var auth_service_1 = require('./authorization/auth.service');
var error_service_1 = require('./errors/error.service');
var user_service_1 = require('./users/user.service');
var info_service_1 = require('./dialogs/info/info.service');
var confirmation_service_1 = require('./dialogs/confirmation/confirmation.service');
var core_2 = require('angular2-google-maps/core');
var machines_service_1 = require('./machines/machines.service');
var products_service_1 = require('./products/products.service');
var planograms_service_1 = require('./planograms/planograms.service');
var analytics_service_1 = require('./machines/analytics/analytics.service');
var routes_service_1 = require('./routes/routes.service');
var utils_service_1 = require('./utils.service');
platform_browser_dynamic_1.bootstrap(app_component_1.AppComponent, [
    auth_service_1.AuthService,
    user_service_1.UserService,
    error_service_1.ErrorService,
    info_service_1.InfoService,
    confirmation_service_1.ConfirmationService,
    machines_service_1.MachinesService,
    products_service_1.ProductsService,
    planograms_service_1.PlanogramsService,
    routes_service_1.RoutesService,
    analytics_service_1.AnalyticsService,
    utils_service_1.UtilsService,
    router_1.ROUTER_PROVIDERS,
    core_1.provide(common_1.LocationStrategy, { useClass: common_1.HashLocationStrategy }),
    http_1.HTTP_PROVIDERS,
    core_2.GOOGLE_MAPS_PROVIDERS,
    core_2.provideLazyMapsAPILoaderConfig({
        apiKey: '',
        libraries: ['places']
    })]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJDQUEyQztBQUMzQyx5Q0FBMEIsbUNBQW1DLENBQUMsQ0FBQTtBQUM5RCx1QkFBaUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNuRCx1QkFBdUQsaUJBQWlCLENBQUMsQ0FBQTtBQUN6RSxxQkFBd0IsZUFBZSxDQUFDLENBQUE7QUFDeEMscUJBQStCLGVBQWUsQ0FBQyxDQUFBO0FBQy9DLDhCQUE0QixpQkFBaUIsQ0FBQyxDQUFBO0FBQzlDLDZCQUE0Qiw4QkFDNUIsQ0FBQyxDQUR5RDtBQUMxRCw4QkFBNkIsd0JBQXdCLENBQUMsQ0FBQTtBQUN0RCw2QkFBNEIsc0JBQXNCLENBQUMsQ0FBQTtBQUNuRCw2QkFBNEIsNkJBQTZCLENBQUMsQ0FBQTtBQUMxRCxxQ0FBb0MsNkNBQTZDLENBQUMsQ0FBQTtBQUNsRixxQkFBc0UsMkJBQTJCLENBQUMsQ0FBQTtBQUNsRyxpQ0FBZ0MsNkJBQTZCLENBQUMsQ0FBQTtBQUM5RCxpQ0FBZ0MsNkJBQTZCLENBQUMsQ0FBQTtBQUM5RCxtQ0FBa0MsaUNBQWlDLENBQUMsQ0FBQTtBQUNwRSxrQ0FBaUMsd0NBQXdDLENBQUMsQ0FBQTtBQUMxRSwrQkFBOEIseUJBQXlCLENBQUMsQ0FBQTtBQUN4RCw4QkFBNkIsaUJBQWlCLENBQUMsQ0FBQTtBQUUvQyxvQ0FBUyxDQUFDLDRCQUFZLEVBQUU7SUFDcEIsMEJBQVc7SUFDWCwwQkFBVztJQUNYLDRCQUFZO0lBQ1osMEJBQVc7SUFDWCwwQ0FBbUI7SUFDbkIsa0NBQWU7SUFDZixrQ0FBZTtJQUNmLHNDQUFpQjtJQUNqQiw4QkFBYTtJQUNiLG9DQUFnQjtJQUNoQiw0QkFBWTtJQUNaLHlCQUFnQjtJQUNoQixjQUFPLENBQUMseUJBQWdCLEVBQUUsRUFBRSxRQUFRLEVBQUUsNkJBQW9CLEVBQUUsQ0FBQztJQUM3RCxxQkFBYztJQUNkLDRCQUFxQjtJQUNyQixxQ0FBOEIsQ0FBQztRQUMzQixNQUFNLEVBQUUsRUFBRTtRQUNWLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQztLQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImJvb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy5kLnRzXCIgLz5cclxuaW1wb3J0IHsgYm9vdHN0cmFwIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcclxuaW1wb3J0IHsgUk9VVEVSX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3ksIEhhc2hMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBwcm92aWRlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgSFRUUF9QUk9WSURFUlMgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xyXG5pbXBvcnQgeyBBcHBDb21wb25lbnR9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRob3JpemF0aW9uL2F1dGguc2VydmljZSdcclxuaW1wb3J0IHsgRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi9lcnJvcnMvZXJyb3Iuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi91c2Vycy91c2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJbmZvU2VydmljZSB9IGZyb20gJy4vZGlhbG9ncy9pbmZvL2luZm8uc2VydmljZSc7XHJcbmltcG9ydCB7IENvbmZpcm1hdGlvblNlcnZpY2UgfSBmcm9tICcuL2RpYWxvZ3MvY29uZmlybWF0aW9uL2NvbmZpcm1hdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR09PR0xFX01BUFNfUFJPVklERVJTLCBwcm92aWRlTGF6eU1hcHNBUElMb2FkZXJDb25maWcgfSBmcm9tICdhbmd1bGFyMi1nb29nbGUtbWFwcy9jb3JlJztcclxuaW1wb3J0IHsgTWFjaGluZXNTZXJ2aWNlIH0gZnJvbSAnLi9tYWNoaW5lcy9tYWNoaW5lcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUHJvZHVjdHNTZXJ2aWNlIH0gZnJvbSAnLi9wcm9kdWN0cy9wcm9kdWN0cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUGxhbm9ncmFtc1NlcnZpY2UgfSBmcm9tICcuL3BsYW5vZ3JhbXMvcGxhbm9ncmFtcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gJy4vbWFjaGluZXMvYW5hbHl0aWNzL2FuYWx5dGljcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUm91dGVzU2VydmljZSB9IGZyb20gJy4vcm91dGVzL3JvdXRlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi91dGlscy5zZXJ2aWNlJztcclxuXHJcbmJvb3RzdHJhcChBcHBDb21wb25lbnQsIFtcclxuICAgIEF1dGhTZXJ2aWNlLFxyXG4gICAgVXNlclNlcnZpY2UsXHJcbiAgICBFcnJvclNlcnZpY2UsXHJcbiAgICBJbmZvU2VydmljZSxcclxuICAgIENvbmZpcm1hdGlvblNlcnZpY2UsXHJcbiAgICBNYWNoaW5lc1NlcnZpY2UsXHJcbiAgICBQcm9kdWN0c1NlcnZpY2UsXHJcbiAgICBQbGFub2dyYW1zU2VydmljZSxcclxuICAgIFJvdXRlc1NlcnZpY2UsXHJcbiAgICBBbmFseXRpY3NTZXJ2aWNlLFxyXG4gICAgVXRpbHNTZXJ2aWNlLFxyXG4gICAgUk9VVEVSX1BST1ZJREVSUyxcclxuICAgIHByb3ZpZGUoTG9jYXRpb25TdHJhdGVneSwgeyB1c2VDbGFzczogSGFzaExvY2F0aW9uU3RyYXRlZ3kgfSksXHJcbiAgICBIVFRQX1BST1ZJREVSUyxcclxuICAgIEdPT0dMRV9NQVBTX1BST1ZJREVSUyxcclxuICAgIHByb3ZpZGVMYXp5TWFwc0FQSUxvYWRlckNvbmZpZyh7XHJcbiAgICAgICAgYXBpS2V5OiAnJyxcclxuICAgICAgICBsaWJyYXJpZXM6IFsncGxhY2VzJ11cclxuICAgIH0pXSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
